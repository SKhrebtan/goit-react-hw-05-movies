{"version":3,"file":"static/js/802.55d3c2d9.chunk.js","mappings":"gNAEMA,GAAaC,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IAGTC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BC,GAA1B,yFACoCC,MAAM,sCAAD,OAAuCD,EAAvC,uEADzC,cACmBE,EADnB,gBAEuBA,EAASC,OAFhC,cAEUC,EAFV,yBAIoBA,GAJpB,kEAiBA,UAXgB,WACZ,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACOC,GAAWC,EAAAA,EAAAA,MAAXD,QAKP,OAJAE,EAAAA,EAAAA,YAAU,YAZd,SAG0B,GAAXX,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAUXA,CAAWS,GAASG,MAAK,gBAAEC,EAAF,EAAEA,QAAF,OAAaL,EAAWK,EAAxB,GACxB,GAAE,CAACJ,IACJK,QAAQC,IAAIR,GAEU,IAAnBA,EAAQS,OAAe,qBAAsB,SAAClB,EAAD,CAAYS,QAASA,GACxE,C,sBCpBD,SAASU,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOd,KAAKS,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["components/Review/Review.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useParams } from \"react-router-dom\";\nimport { useEffect, useState, lazy } from \"react\";\nconst ReviewList = lazy(() => import('../ReviewList/ReviewList'))\n\n\nasync function FetchFilms(id) {\n             const response = await fetch(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=7704615e0d5baf851bf04ec2239749fe&total_results=30`);\n    const data = await response.json();\n    \n             return data\n}\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([])\n    const {movieId} = useParams();\n    useEffect(() => {\n    FetchFilms(movieId).then(({results})=>setReviews(results))\n    }, [movieId])\n    console.log(reviews)\n    return (\n       reviews.length === 0 ? 'Sorry, no reviews' : <ReviewList reviews={reviews} /> )\n}\n\nexport default Reviews;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["ReviewList","lazy","FetchFilms","id","fetch","response","json","data","useState","reviews","setReviews","movieId","useParams","useEffect","then","results","console","log","length","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}