{"version":3,"file":"static/js/383.d8c7d0c6.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","pages/Movies/Movies.jsx","../node_modules/src/useInView.tsx","components/Fetches/FetchMoviesBySearch.jsx"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === 'root'\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === 'function') {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import { lazy, useState, useEffect } from \"react\";\nimport { useInView } from 'react-intersection-observer';\nimport FetchMoviesBySearch from '../../components/Fetches/FetchMoviesBySearch';\n\nimport PropTypes from 'prop-types';\nimport empty from '../../images/empty.jpg';\nimport errorImg from '../../images/error.jpg';\nimport {FallingLines} from 'react-loader-spinner';\nconst Searchbar = lazy(() => import('../../components/Searchbar/Searchbar'));\nconst MovieList = lazy(() => import('../../components/MovieList/MovieList'));\n\nconst Movies = () => {\n    const [value, setValue] = useState('');\n    const [result, setResult] = useState([]);\n    const [error, setError] = useState(null);\n    const [status, setStatus] = useState('idle');\n    const [page, setPage] = useState(1);\n    const { ref, inView } = useInView();\n//     const messagesEndRef = useRef(null);\n    \n//   const scrollToBottom = () => {\n//     messagesEndRef.current && messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n//     }\n    \n    function handleSubmit(value) {\n        setValue(value)\n        setPage(1)\n        }\n    \n    useEffect(() => {\n            if (!value) return;\n             setStatus('pending')\n            FetchMoviesBySearch(value, page)\n                .then(response => {\n        if (response.ok) {\n           return response.json();\n        }\n        return Promise.reject(\n          new Error('Щось пішло не так, повторіть спробу')\n        );\n               })\n                .then(({ results, total_results }) => {\n                    \n                          setResult(prevResults => page === 1 ? results : [...prevResults, ...results],\n                           \n                          setStatus(status => total_results === 0 ? 'empty' : 'resolved')\n                          )\n                      })\n         .catch(error => { \n        setError(error);\n        setStatus('rejected')\n      }\n    )\n        \n    }, [value, page])\n   \n\n    useEffect(() => {\n        if (inView) {\n        setPage(page => page + 1)\n    }\n    }, [inView])\n\n    // useEffect( () => {\n    // scrollToBottom()\n    // }, [result]);\n    \n    return (\n        <div>\n            <Searchbar onSubmit={handleSubmit}/>\n            {status === 'pending' && <FallingLines />}\n            {status === 'empty' && <img src={empty} alt=\"empty\"></img>}\n            {status === 'error' && <img src={errorImg} alt={error}></img>}\n            <MovieList movies={result} />\n            {result.length > 0 && <button type=\"button\"\n                ref={ref}\n                onClick={() => setPage(page => page + 1)}\n            >Load more {inView}</button>}\n            {/* < div ref = { messagesEndRef } />   */}\n        </div>\n    )\n}\n\nexport default Movies;\n\nMovies.propTypes = {\n    value: PropTypes.string,\n    result: PropTypes.array,\n    error: PropTypes.string,\n    status: PropTypes.string,\n}","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","const key = '7704615e0d5baf851bf04ec2239749fe';\n\nexport default function FetchMovies (value, page) {\nreturn fetch(`https://api.themoviedb.org/3/search/movie?query=${value}&api_key=${key}&page=${page}`)\n}"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectWithoutProperties","source","excluded","i","target","sourceKeys","length","indexOf","sourceSymbolKeys","prototype","propertyIsEnumerable","call","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","sort","map","concat","root","has","set","toString","get","createObserver","id","instance","thresholds","elements","observer","IntersectionObserver","entries","forEach","entry","_a","inView","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","callback","Array","isArray","observe","element","arguments","undefined","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","callbacks","splice","delete","unobserve","size","disconnect","React","Searchbar","lazy","MovieList","_useState","useState","_useState2","_slicedToArray","setValue","_useState3","_useState4","result","setResult","_useState5","_useState6","error","setError","_useState7","_useState8","status","setStatus","_useState9","_useState10","page","setPage","_useInView","_ref","delay","rootMargin","triggerOnce","skip","initialInView","onChange","_React2$useState","React2","_React2$useState2","ref","setRef","_React2$useState3","_React2$useState4","state","setState","current","entryTarget","previousEntryTarget","useInView","useEffect","fetch","FetchMoviesBySearch","then","response","ok","json","Promise","reject","Error","results","total_results","prevResults","_toConsumableArray","catch","_jsxs","children","_jsx","onSubmit","FallingLines","src","empty","alt","errorImg","movies","type","onClick"],"sourceRoot":""}