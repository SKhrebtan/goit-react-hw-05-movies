{"version":3,"file":"static/js/247.a1f84a82.chunk.js","mappings":"gNAEMA,GAAWC,EAAAA,EAAAA,OAAK,kBAAI,4BAAJ,IAEPC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BC,GAA1B,yFACoCC,MAAM,sCAAD,OAAuCD,EAAvC,uEADzC,cACmBE,EADnB,gBAEuBA,EAASC,OAFhC,cAEUC,EAFV,yBAIoBA,GAJpB,kEAgBA,UAVa,WACT,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACOC,GAAWC,EAAAA,EAAAA,MAAXD,QAKP,OAJAE,EAAAA,EAAAA,YAAU,YAXd,SAE0B,GAAXX,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAUXA,CAAWS,GAASG,MAAK,gBAAEL,EAAF,EAAEA,KAAF,OAAUC,EAAQD,EAAlB,GACxB,GAAE,CAACE,IACJI,QAAQC,IAAIP,IACL,SAACT,EAAD,CAAUS,KAAMA,GAC1B,C,sBClBD,SAASQ,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOZ,KAAKO,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useParams } from \"react-router-dom\";\nimport { useEffect, useState, lazy } from \"react\";\nconst CastList = lazy(()=>import('../CastList/CastList'))\n\nasync function FetchFilms(id) {\n             const response = await fetch(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=7704615e0d5baf851bf04ec2239749fe&total_results=30`);\n    const data = await response.json();\n    \n             return data\n}\nconst Cast = () => {\n    const [cast, setCast] = useState([])\n    const {movieId} = useParams();\n    useEffect(() => {\n    FetchFilms(movieId).then(({cast})=>setCast(cast))\n    }, [movieId])\n    console.log(cast)\n    return <CastList cast={cast} />\n}\n\nexport default Cast;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["CastList","lazy","FetchFilms","id","fetch","response","json","data","useState","cast","setCast","movieId","useParams","useEffect","then","console","log","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}