{"version":3,"file":"static/js/798.8e363810.chunk.js","mappings":"2SAMMA,GAAYC,EAAAA,EAAAA,OAAK,kBAAM,6BAA8C,IACrEC,GAAYD,EAAAA,EAAAA,OAAK,kBAAM,6BAA8C,IAmD3E,EAhDe,WACX,IAAAE,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAA4BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAA4Bb,EAAAA,EAAAA,UAAS,QAAOc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAArCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAgCxB,OAzBAG,EAAAA,EAAAA,YAAU,WACGd,IACLe,QAAQC,IAAIhB,GACZa,EAAU,WCtBP,SAAsBb,GACrC,OAAOiB,MAAM,mDAADC,OAAoDlB,EAAK,aAAAkB,OAHzD,oCAIZ,CDqBYC,CAAoBnB,GACfoB,MAAK,SAAAC,GACd,OAAIA,EAASC,GACHD,EAASE,OAEZC,QAAQC,OACb,IAAIC,MAAM,wLAEL,IACEN,MAAK,SAAAO,GAAiC,IAA9BC,EAAOD,EAAPC,QAASC,EAAaF,EAAbE,cACRxB,GAASyB,EAAAA,EAAAA,GAAKF,GACdf,GAAU,SAAAD,GAAM,OAAsB,IAAlBiB,EAAsB,QAAU,UAAU,IAElE,IACZE,OAAM,SAAAvB,GACRC,EAASD,GACTK,EAAU,WACZ,IAGF,GAAE,CAACb,KAECgC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EAEIC,EAAAA,EAAAA,KAACzC,EAAS,CAAC0C,SAjCnB,SAAsBnC,GAClBC,EAASD,EAEb,IA+BoB,YAAXY,IAAwBsB,EAAAA,EAAAA,KAACE,EAAAA,GAAY,IAC1B,UAAXxB,IAAsBsB,EAAAA,EAAAA,KAAA,OAAKG,IAAKC,EAAOC,IAAI,UAChC,UAAX3B,IAAsBsB,EAAAA,EAAAA,KAAA,OAAKG,IAAKG,EAAUD,IAAK/B,IACpC,aAAXI,IAAyBsB,EAAAA,EAAAA,KAACvC,EAAS,CAAC8C,OAAQrC,MAGzD,C","sources":["pages/Movies/Movies.jsx","components/Fetches/FetchMoviesBySearch.jsx"],"sourcesContent":["import { lazy, useState, useEffect } from \"react\";\nimport FetchMoviesBySearch from '../../components/Fetches/FetchMoviesBySearch';\nimport PropTypes from 'prop-types';\nimport empty from '../../images/empty.jpg';\nimport errorImg from '../../images/error.jpg';\nimport {FallingLines} from 'react-loader-spinner';\nconst Searchbar = lazy(() => import('../../components/Searchbar/Searchbar'));\nconst MovieList = lazy(() => import('../../components/MovieList/MovieList'));\n\n\nconst Movies = () => {\n    const [value, setValue] = useState('');\n    const [result, setResult] = useState([]);\n    const [error, setError] = useState(null);\n    const [status, setStatus] = useState('idle');\n    \n    function handleSubmit(value) {\n        setValue(value)\n      \n    }\n    \n    useEffect(() => {\n            if (!value) return;\n            console.log(value);\n            setStatus('pending')\n            FetchMoviesBySearch(value)\n                .then(response => {\n        if (response.ok) {\n           return response.json();\n        }\n        return Promise.reject(\n          new Error('Щось пішло не так, повторіть спробу')\n        );\n               })\n                .then(({ results, total_results }) => {\n                          setResult([...results],\n                          setStatus(status => total_results === 0 ? 'empty' : 'resolved')\n                          )\n                      })\n         .catch(error => { \n        setError(error);\n        setStatus('rejected')\n      }\n    )\n        \n    },[value])\n    return (\n        <div>\n            {/* <SearchBox setSearchParams={setSearchParams} /> */}\n            <Searchbar onSubmit={handleSubmit}/>\n            {status === 'pending' && <FallingLines />}\n            {status === 'empty' && <img src={empty} alt=\"empty\"></img>}\n            {status === 'error' && <img src={errorImg} alt={error}></img>}\n            {status === 'resolved' && <MovieList movies={result} />}\n        </div>\n    )\n}\n\nexport default Movies;\n\nMovies.propTypes = {\n    value: PropTypes.string,\n    result: PropTypes.array,\n    error: PropTypes.string,\n    status: PropTypes.string,\n}","const key = '7704615e0d5baf851bf04ec2239749fe';\n\nexport default function FetchMovies (value) {\nreturn fetch(`https://api.themoviedb.org/3/search/movie?query=${value}&api_key=${key}`)\n}"],"names":["Searchbar","lazy","MovieList","_useState","useState","_useState2","_slicedToArray","value","setValue","_useState3","_useState4","result","setResult","_useState5","_useState6","error","setError","_useState7","_useState8","status","setStatus","useEffect","console","log","fetch","concat","FetchMoviesBySearch","then","response","ok","json","Promise","reject","Error","_ref","results","total_results","_toConsumableArray","catch","_jsxs","children","_jsx","onSubmit","FallingLines","src","empty","alt","errorImg","movies"],"sourceRoot":""}